---
import HorizontalCenter from "../components/HorizontalCenter.astro";
import Layout from "./GttLayoutGames.astro";
const {pageTitle} = Astro.props;
---
<Layout pageTitle = {pageTitle}>
    <HorizontalCenter><h1 class="GttLayoutGames-main">{pageTitle}</h1></HorizontalCenter>
    <HorizontalCenter><h2 class="GttLayoutGames-registration">Registrace: <span id="GttLayoutGameRules-registrationTime">již brzy</h2></HorizontalCenter>
    <slot/>
    <div id="GttLayoutGameRules-gameRoles"></div>
</Layout>
<script>
    import { getGameFromGameName, listGames } from "../scripts/api/game";
    import { listGeneratedRoles } from "../scripts/api/generatedRoles";

    const nav = {
        "generalRules": document.getElementById("GttLayoutGames-generalRules") as HTMLLinkElement,
        "rules": document.getElementById("GttLayoutGames-rules") as HTMLLinkElement,
        "bracket": document.getElementById("GttLayoutGames-bracket") as HTMLLinkElement,
        "contestants": document.getElementById("GttLayoutGames-contestants") as HTMLLinkElement,
    }
    nav.generalRules.href = "/games/rules/general";
    nav.generalRules.classList.remove("disabled");

    function formateDate(date: Date|undefined){
        if(date === undefined){
            return "již brzy";
        }else{
            return `${date.getDate()}. ${date.getMonth() + 1}. ${date.getHours()}:${date.getMinutes()}`
        }
    }

    const registration = document.getElementById("GttLayoutGameRules-registrationTime") as HTMLDivElement;
    const gameRolesHolder = document.getElementById("GttLayoutGameRules-gameRoles") as HTMLDivElement;
    const url = window.location.href;
    const gameName = decodeURIComponent(url.split('/').filter(Boolean).pop()||"");

    async function loadGame(){
        const allGames = await listGames();
        if(gameName === undefined){
            console.error("gameName is undefined");
        }else{
            const game = getGameFromGameName(gameName, allGames);
            if(game === undefined){
                console.error("game is undefined");
            }else{
                nav.contestants.href = `/games/contestants?game=${game.name}`;
                nav.contestants.classList.remove("disabled");

                const registrationStart = game.registrationStart?new Date(game.registrationStart): undefined;
                const registrationEnd = game.registrationEnd?new Date(game.registrationEnd): undefined;
                registration.innerText = `${formateDate(registrationStart)} - ${formateDate(registrationEnd)}`;
                const gameRoles = await listGeneratedRoles(game.gameId);
                if(gameRoles.length > 0){
                    const table = document.createElement('table');
                    table.classList.add("GttLayoutGames-table");

                    const thead = document.createElement('thead');
                    const headerRow = document.createElement('tr');

                    const headerRole = document.createElement('th');
                    const headerRoleSpan = document.createElement('span');
                    headerRoleSpan.innerText = "ROLE";
                    headerRole.appendChild(headerRoleSpan);
                    headerRow.appendChild(headerRole);

                    const headerMin = document.createElement('th');
                    const HeaderMinSpan = document.createElement('span');
                    HeaderMinSpan.innerText = "MIN";
                    headerMin.appendChild(HeaderMinSpan);
                    headerRow.appendChild(headerMin);

                    const headerMax = document.createElement('th');
                    const headerMaxSpan = document.createElement('span');
                    headerMaxSpan.innerText = "MAX";
                    headerMax.appendChild(headerMaxSpan);
                    headerRow.appendChild(headerMax);

                    thead.appendChild(headerRow);
                    
                    const tbody = document.createElement('tbody');

                    for(const gameRole of gameRoles){
                        const row = document.createElement('tr');

                        const name = document.createElement('td');
                        name.textContent = String(gameRole.roleName);
                        row.appendChild(name);

                        const min = document.createElement('td');
                        min.textContent = String(gameRole.minimal);
                        row.appendChild(min);

                        const max = document.createElement('td');
                        max.textContent = String(gameRole.maximal);
                        row.appendChild(max);

                        tbody.appendChild(row);
                    }
                    table.appendChild(thead);
                    table.appendChild(tbody);
                    gameRolesHolder.appendChild(table);
                }
            }
        }
    }
    loadGame();
</script>
<style>
    .GttLayoutGames-main{
        margin-bottom: 0rem;
    }
    .GttLayoutGames-registration{
        text-align: center;
        font-weight: bolder;
        font-size: 2rem;
        margin-top: 0rem;
        background-image: linear-gradient(45deg, #FFD60A, #FF9E00);
        background-clip: text;
        -webkit-background-clip: text; /* For WebKit browsers */
        color: transparent;
    }
    
</style>
<style is:global>
    #GttLayoutGameRules-gameRoles thead span{
        width: fit-content;
        background-image: linear-gradient(45deg, #FFD60A, #FF9E00);
        background-clip: text;
        -webkit-background-clip: text; /* For WebKit browsers */
        color: transparent;
    }
    #GttLayoutGameRules-gameRoles table{
        border-collapse: collapse;
    }

    #GttLayoutGameRules-gameRoles td, #GttLayoutGameRules-gameRoles th{
        border-collapse: collapse;
        border: 0.3rem solid white;
        padding: 1rem;
        text-align: center;
    }
</style>